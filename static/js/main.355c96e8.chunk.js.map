{"version":3,"sources":["containers/App/reducer.js","containers/Dashboard/reducer.js","reducers.js","containers/App/saga.js","utils/urls.js","utils/apiHelper.js","utils/goodreads.js","containers/Dashboard/saga.js","sagas.js","configureStore.js","components/Fallback/index.jsx","containers/App/index.jsx","serviceWorker.js","index.js","containers/Dashboard/action.js","utils/constants.js"],"names":["initialState","isLoading","app","state","arguments","length","undefined","type","ActionTypes","Object","objectSpread","userId","userInfo","userData","dashboard","action","user","rootReducer","combineReducers","helloWorld","runtime_regenerator_default","a","wrap","_context","prev","next","put","message","stop","_marked","this","saga","takeEvery","grApiRoot","wrapByLoader","getGetParams","method","headers","Content-Type","handleResponse","response","status","error","code","statusText","Promise","reject","json","then","fetchApi","url","params","fetch","catch","err","fn","apiHelper_marked","getUserInfo","concat","getBooksOnShelf","shelf","Dashboard_saga","takeLatest","regenerator_default","mark","_callee","call","Goodreads","sent","Actions","t0","_callee2","cachedData","shelves","bookOnShelves","_context2","JSON","parse","window","localStorage","getItem","Date","now","timestamp","data","user_shelves","user_shelf","map","name","all","idx","books","book","setItem","stringify","rootSaga","toConsumableArray","appSaga","dashboardSaga","sagas_marked","sagaMiddleware","createSagaMiddleware","FallBack","react_default","createElement","className","Dashboard","lazy","__webpack_require__","e","bind","Home","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","searchHandler","assertThisInitialized","ReactGA","initialize","testMode","pageview","location","pathname","search","history","push","_this2","spin","spinning","delay","Switch","Route","exact","path","render","react","fallback","Fallback","Redirect","to","Component","defaultProps","withRouter","connect","Boolean","hostname","match","store","middlewares","enhancers","applyMiddleware","apply","composeEnhancers","compose","createStore","runSaga","run","injectedReducers","injectedSagas","configureStore","ReactDOM","es","BrowserRouter","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","d","__webpack_exports__","errorOccured","getUserInfoSuccess","getUserData","getUserDataSuccess","_utils_constants__WEBPACK_IMPORTED_MODULE_0__","ERROR_OCCURED","FETCH_USER_INFO","FETCH_USER_INFO_SUCCESS","FETCH_USER_DATA","FETCH_USER_DATA_SUCCESS","HELLO_WORLD","FETCH_START","FETCH_END"],"mappings":"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","file":"static/js/main.355c96e8.chunk.js","sourcesContent":["import * as ActionTypes from '../../utils/constants'\n\nconst initialState = {\n  isLoading: 0\n}\n\nconst app = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_START: {\n      return { ...state, isLoading: state.isLoading + 1 }\n    }\n    case ActionTypes.FETCH_END: {\n      return { ...state, isLoading: state.isLoading - 1 }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\nexport default app\n","import * as ActionTypes from '../../utils/constants'\n\nconst initialState = {\n  userId: null,\n  userInfo: null,\n  userData: null\n}\n\nconst dashboard = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_USER_INFO: {\n      const { userId } = action\n      return { ...state, userId }\n    }\n    case ActionTypes.FETCH_USER_INFO_SUCCESS: {\n      const { userInfo } = action\n      return { ...state, userInfo: userInfo.user }\n    }\n    case ActionTypes.FETCH_USER_DATA: {\n      const { userId } = action\n      return { ...state, userId }\n    }\n    case ActionTypes.FETCH_USER_DATA_SUCCESS: {\n      const { userData } = action\n      return { ...state, userData: userData.user }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\nexport default dashboard\n","import { combineReducers } from 'redux'\nimport app from './containers/App/reducer'\nimport dashboard from './containers/Dashboard/reducer'\n\nconst rootReducer = combineReducers({ app, dashboard })\n\nexport default rootReducer\n","import { takeEvery, put } from 'redux-saga/effects'\nimport * as ActionTypes from '../../utils/constants'\n\nfunction * helloWorld () {\n  yield put({ type: 'SUCCESS', message: 'Hello World' })\n}\n\nexport default [\n  takeEvery(ActionTypes.HELLO_WORLD, helloWorld)\n]\n","export const grApiRoot = 'https://uqh87q11i5.execute-api.us-east-1.amazonaws.com/prod'\n","/* global fetch */\nimport { put } from 'redux-saga/effects'\nimport * as ActionTypes from './constants'\n\nexport const getGetParams = () => ({\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\nexport const handleResponse = (response) => {\n  if (response.status !== 200) {\n    const error = {\n      error: {\n        code: response.status,\n        message: 'Fetch error'\n      },\n      status: response.status,\n      statusText: response.statusText\n    }\n    return Promise.reject(error)\n  }\n  return response.json().then(json => json)\n}\n\nexport const fetchApi = (url, params) =>\n  fetch(url)\n    .then(handleResponse)\n    .catch(err => err)\n\nexport function * wrapByLoader (fn) {\n  yield put({ type: ActionTypes.FETCH_START })\n  yield fn()\n  yield put({ type: ActionTypes.FETCH_END })\n}\n","import { grApiRoot } from './urls'\nimport { getGetParams, fetchApi } from './apiHelper'\n\nexport function getUserInfo (userId) {\n  const url = `${grApiRoot}/user/show?id=${userId}`\n  return fetchApi(url, getGetParams())\n}\n\nexport function getBooksOnShelf (userId, shelf) {\n  const url = `${grApiRoot}/review/list?id=${userId}&shelf=${shelf}&per_page=200`\n  return fetchApi(url, getGetParams())\n}\n","import { takeLatest, put, call, all } from 'redux-saga/effects'\nimport * as ActionTypes from '../../utils/constants'\nimport * as Actions from './action'\nimport * as Goodreads from '../../utils/goodreads'\nimport { wrapByLoader } from '../../utils/apiHelper'\n\nconst getUserInfo = action =>\n  wrapByLoader(function * () {\n    try {\n      const response = yield call(Goodreads.getUserInfo, action.userId)\n      if (!response.error) {\n        const userInfo = response\n        yield put(Actions.getUserInfoSuccess(userInfo))\n      } else {\n        yield put(Actions.errorOccured(response))\n      }\n    } catch (err) {\n      yield put(Actions.errorOccured(err))\n    }\n  })\n\nconst getUserData = action =>\n  wrapByLoader(function * () {\n    try {\n      const cachedData = JSON.parse(window.localStorage.getItem(action.userId))\n\n      if (cachedData && ((Date.now() - cachedData.timestamp) < 3600000)) {\n        yield put(Actions.getUserDataSuccess(cachedData.data))\n      } else {\n        const response = yield call(Goodreads.getUserInfo, action.userId)\n        if (!response.error) {\n          const userData = response\n          const shelves = userData.user.user_shelves.user_shelf.map(shelf => shelf.name)\n          const bookOnShelves = yield all(\n            shelves.map(\n              shelf => call(Goodreads.getBooksOnShelf, action.userId, shelf)\n            )\n          )\n          userData.user.user_shelves = bookOnShelves.map((shelf, idx) => ({\n            name: shelves[idx],\n            books: shelf.books ? shelf.books : { book: [] }\n          }))\n          window.localStorage.setItem(\n            action.userId,\n            JSON.stringify({\n              data: userData,\n              timestamp: Date.now()\n            })\n          )\n          yield put(Actions.getUserDataSuccess(userData))\n        } else {\n          yield put(Actions.errorOccured(response))\n        }\n      }\n    } catch (err) {\n      yield put(Actions.errorOccured(err))\n    }\n  })\n\nexport default [\n  takeLatest(ActionTypes.FETCH_USER_INFO, getUserInfo),\n  takeLatest(ActionTypes.FETCH_USER_DATA, getUserData)\n]\n","import { all } from 'redux-saga/effects'\nimport appSaga from './containers/App/saga'\nimport dashboardSaga from './containers/Dashboard/saga'\n\nfunction * rootSaga () {\n  yield all([\n    ...appSaga,\n    ...dashboardSaga\n  ])\n}\n\nexport default rootSaga\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from './reducers'\nimport rootSaga from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport default function configureStore (initialState = {}) {\n  const middlewares = [sagaMiddleware]\n\n  const enhancers = [\n    applyMiddleware(...middlewares)\n  ]\n\n  // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  /* eslint-disable no-underscore-dangle */\n  const composeEnhancers =\n  process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    : compose\n  /* eslint-enable */\n\n  const store = createStore(\n    rootReducer,\n    // fromJS(initialState),\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run(rootSaga)\n  store.injectedReducers = {} // Reducer registry\n  store.injectedSagas = {} // Saga registry\n\n  // if(module.hot) {\n  //   // Enable Webpack hot module replacement for reducers\n  //   module.hot.accept('../reducers', () => {\n  //     const nextReducer = require('../reducers').default\n  //     store.replaceReducer(nextReducer)\n  //   })\n  // }\n\n  return store\n}\n","import React from 'react'\n// import { Spin } from 'antd'\n\nimport './style.css'\n\n// const FallBack = () => (\n//   <Spin\n//     className='App'\n//     spinning\n//     delay={1}\n//     size='large'\n//   />\n// )\n\nconst FallBack = () => <div className='suspenseFallback'>Loading...</div>\n\nexport default FallBack\n","import React, { Component, Suspense, lazy } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  withRouter,\n  Route,\n  Switch,\n  Redirect\n} from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport ReactGA from 'react-ga'\nimport Fallback from '../../components/Fallback'\n\n// antd components\nimport { Spin } from 'antd'\n\nimport 'antd/dist/antd.css'\nimport './style.css'\n\n// containers\nconst Dashboard = lazy(() => import('../Dashboard'))\nconst Home = lazy(() => import('../Home'))\n\nconst mapStateToProps = state => ({\n  isLoading: state.app.isLoading\n})\n\nconst mapDispatchToProps = {\n\n}\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n\n    this.searchHandler = this.searchHandler.bind(this)\n\n    // Google analytics\n    ReactGA.initialize('UA-132487735-1', { testMode: this.props.testMode })\n    ReactGA.pageview(window.location.pathname + window.location.search)\n  }\n\n  searchHandler (userId) {\n    this.props.history.push(`/user/${userId}`)\n  }\n\n  componentDidMount () {\n    // Maybe get top books from goodreads?\n  }\n\n  render () {\n    return (\n      <Spin\n        className='App'\n        spinning={this.props.isLoading > 0}\n        delay={500}\n      >\n        <Switch>\n          <Route\n            exact\n            path='/'\n            render={props => (\n              <Suspense fallback={<Fallback />} >\n                <Home\n                  searchHandler={this.searchHandler}\n                />\n              </Suspense>\n            )}\n          />\n          <Route\n            path='/user/:userId'\n            render={props => (\n              <Suspense fallback={<Fallback />} >\n                <Dashboard {...props} />\n              </Suspense>\n            )}\n          />\n          <Redirect to='/' />\n        </Switch>\n      </Spin>\n    )\n  }\n}\n\nApp.defaultProps = {\n  testMode: false\n}\n\nApp.propTypes = {\n  testMode: PropTypes.bool\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(App)\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport configureStore from './configureStore'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './style.css'\n\nconst store = configureStore()\n\nReactDOM.render(<Provider store={store}><Router><App /></Router></Provider>,\n  document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import {\n  FETCH_USER_INFO,\n  FETCH_USER_INFO_SUCCESS,\n  FETCH_USER_DATA,\n  FETCH_USER_DATA_SUCCESS,\n  ERROR_OCCURED\n} from '../../utils/constants'\n\nexport const errorOccured = err => ({\n  type: ERROR_OCCURED,\n  err\n})\n\nexport const getUserInfo = userId => ({\n  type: FETCH_USER_INFO,\n  userId\n})\n\nexport const getUserInfoSuccess = userInfo => ({\n  type: FETCH_USER_INFO_SUCCESS,\n  userInfo\n})\n\nexport const getUserData = userId => ({\n  type: FETCH_USER_DATA,\n  userId\n})\n\nexport const getUserDataSuccess = userData => ({\n  type: FETCH_USER_DATA_SUCCESS,\n  userData\n})\n","export const HELLO_WORLD = 'HELLO_WORLD'\nexport const FETCH_START = 'FETCH_START'\nexport const ERROR_OCCURED = 'ERROR_OCCURED'\nexport const NETWORK_ERROR_OCCURED = 'NETWORK_ERROR_OCCURED'\nexport const FETCH_END = 'FETCH_END'\n\nexport const FETCH_USER_INFO = 'FETCH_USER_INFO'\nexport const FETCH_USER_INFO_SUCCESS = 'FETCH_USER_INFO_SUCCESS'\nexport const FETCH_USER_DATA = 'FETCH_USER_DATA'\nexport const FETCH_USER_DATA_SUCCESS = 'FETCH_USER_DATA_SUCCESS'\n"],"sourceRoot":""}