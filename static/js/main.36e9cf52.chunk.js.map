{"version":3,"sources":["assets/images/logo.svg","utils/constants.js","containers/App/reducer.js","reducers.js","containers/App/action.js","utils/urls.js","utils/apiHelper.js","utils/goodreads.js","containers/App/saga.js","sagas.js","configureStore.js","containers/App/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","FETCH_START","FETCH_END","initialState","isLoading","userId","userInfo","app","state","arguments","length","undefined","action","type","ActionTypes","Object","objectSpread","user","rootReducer","combineReducers","errorOccured","err","getUserInfoSuccess","grApiRoot","wrapByLoader","getGetParams","method","headers","Content-Type","handleResponse","response","status","error","code","message","statusText","Promise","reject","json","then","fetchApi","url","params","fetch","catch","fn","regenerator_default","a","wrap","_context","prev","next","put","stop","_marked","this","getUserInfo","concat","helloWorld","saga_marked","saga","takeEvery","takeLatest","mark","_callee","_context2","call","Goodreads","sent","Actions","t0","rootSaga","all","toConsumableArray","appSaga","sagas_marked","sagaMiddleware","createSagaMiddleware","mapDispatchToProps","App","props","react_default","createElement","className","Switch","Route","exact","path","render","src","logo","alt","href","target","rel","Redirect","to","match","Component","withRouter","connect","Boolean","window","location","hostname","store","middlewares","enhancers","applyMiddleware","apply","composeEnhancers","compose","createStore","runSaga","run","injectedReducers","injectedSagas","configureStore","ReactDOM","es","BrowserRouter","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36e9cf52.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const HELLO_WORLD = 'HELLO_WORLD'\nexport const FETCH_START = 'FETCH_START'\nexport const ERROR_OCCURED = 'ERROR_OCCURED'\nexport const NETWORK_ERROR_OCCURED = 'NETWORK_ERROR_OCCURED'\nexport const FETCH_END = 'FETCH_END'\n\nexport const FETCH_USER_INFO = 'FETCH_USER_INFO'\nexport const FETCH_USER_INFO_SUCCESS = 'FETCH_USER_INFO_SUCCESS'\n","import * as ActionTypes from '../../utils/constants'\n\nconst initialState = {\n  isLoading: 0,\n  userId: null,\n  userInfo: null\n}\n\nconst app = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_START: {\n      return { ...state, isLoading: state.isLoading + 1 }\n    }\n    case ActionTypes.FETCH_END: {\n      return { ...state, isLoading: state.isLoading - 1 }\n    }\n    case ActionTypes.FETCH_USER_INFO: {\n      const { userId } = action\n      return { ...state, userId }\n    }\n    case ActionTypes.FETCH_USER_INFO_SUCCESS: {\n      const { userInfo } = action\n      return { ...state, userInfo: userInfo.user }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\nexport default app\n","import { combineReducers } from 'redux'\nimport app from './containers/App/reducer'\n\nconst rootReducer = combineReducers({ app })\n\nexport default rootReducer\n","import {\n  HELLO_WORLD,\n  FETCH_USER_INFO,\n  FETCH_USER_INFO_SUCCESS,\n  ERROR_OCCURED\n} from '../../utils/constants'\n\nexport const helloWorld = () => ({\n  type: HELLO_WORLD\n})\n\nexport const errorOccured = err => ({\n  type: ERROR_OCCURED,\n  err\n})\n\nexport const getUserInfo = userId => ({\n  type: FETCH_USER_INFO,\n  userId\n})\n\nexport const getUserInfoSuccess = userInfo => ({\n  type: FETCH_USER_INFO_SUCCESS,\n  userInfo\n})\n","export const grApiRoot = 'https://uqh87q11i5.execute-api.us-east-1.amazonaws.com/prod'\n","/* global fetch */\nimport { put } from 'redux-saga/effects'\nimport * as ActionTypes from './constants'\n\nexport const getGetParams = () => ({\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\nexport const handleResponse = (response) => {\n  if (response.status !== 200) {\n    const error = {\n      error: {\n        code: response.status,\n        message: 'Fetch error'\n      },\n      status: response.status,\n      statusText: response.statusText\n    }\n    return Promise.reject(error)\n  }\n  return response.json().then(json => json)\n}\n\nexport const fetchApi = (url, params) =>\n  fetch(url)\n    .then(handleResponse)\n    .catch(err => err)\n\nexport function * wrapByLoader (fn) {\n  yield put({ type: ActionTypes.FETCH_START })\n  yield fn()\n  yield put({ type: ActionTypes.FETCH_END })\n}\n","import { grApiRoot } from './urls'\nimport { getGetParams, fetchApi } from './apiHelper'\n\nexport function getUserInfo (userId) {\n  const url = `${grApiRoot}/user/show?id=${userId}`\n  return fetchApi(url, getGetParams())\n}\n","import { takeEvery, takeLatest, put, call } from 'redux-saga/effects'\nimport * as ActionTypes from '../../utils/constants'\nimport * as Actions from './action'\nimport * as Goodreads from '../../utils/goodreads'\nimport { wrapByLoader } from '../../utils/apiHelper'\n\nfunction * helloWorld () {\n  yield put({ type: 'SUCCESS', message: 'Hello World' })\n}\n\nconst getUserInfo = action =>\n  wrapByLoader(function * () {\n    try {\n      const response = yield call(Goodreads.getUserInfo, action.userId)\n      if (!response.error) {\n        const userInfo = response\n        yield put(Actions.getUserInfoSuccess(userInfo))\n      } else {\n        yield put(Actions.errorOccured(response))\n      }\n    } catch (err) {\n      yield put(Actions.errorOccured(err))\n    }\n  })\n\nexport default [\n  takeEvery(ActionTypes.HELLO_WORLD, helloWorld),\n  takeLatest(ActionTypes.FETCH_USER_INFO, getUserInfo)\n]\n","import { all } from 'redux-saga/effects'\nimport appSaga from './containers/App/saga'\n\nfunction * rootSaga () {\n  yield all([\n    ...appSaga\n  ])\n}\n\nexport default rootSaga\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from './reducers'\nimport rootSaga from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport default function configureStore (initialState = {}) {\n  const middlewares = [sagaMiddleware]\n\n  const enhancers = [\n    applyMiddleware(...middlewares)\n  ]\n\n  // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  /* eslint-disable no-underscore-dangle */\n  const composeEnhancers =\n  process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    : compose\n  /* eslint-enable */\n\n  const store = createStore(\n    rootReducer,\n    // fromJS(initialState),\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run(rootSaga)\n  store.injectedReducers = {} // Reducer registry\n  store.injectedSagas = {} // Saga registry\n\n  // if(module.hot) {\n  //   // Enable Webpack hot module replacement for reducers\n  //   module.hot.accept('../reducers', () => {\n  //     const nextReducer = require('../reducers').default\n  //     store.replaceReducer(nextReducer)\n  //   })\n  // }\n\n  return store\n}\n","import React, { Component } from 'react'\nimport { withRouter, Route, Switch, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport {\n  getUserInfo\n} from './action'\n\nimport logo from '../../assets/images/logo.svg'\nimport './style.css'\n\nconst mapStateToProps = state => ({\n  userInfo: state.userInfo\n})\n\nconst mapDispatchToProps = {\n  getUserInfo\n}\n\nclass App extends Component {\n  componentDidMount () {\n    this.props.getUserInfo('88517742')\n  }\n  render () {\n    return (\n      <div className='App'>\n        <Switch>\n          <Route\n            exact\n            path='/'\n            render={props => (\n              <header className='App-header'>\n                <img src={logo} className='App-logo' alt='logo' />\n                <p>\n                  Edit <code>src/containers/App.js</code> and save to reload.\n                </p>\n                <a\n                  className='App-link'\n                  href='https://reactjs.org'\n                  target='_blank'\n                  rel='noopener noreferrer'\n                >\n                  Learn React\n                </a>\n              </header>\n            )}\n          />\n          <Route\n            exact\n            path='/user'\n            render={props => (\n              <Redirect to='/' />\n            )}\n          />\n          <Route\n            exact\n            path='/user/:userId'\n            render={props => (\n              <header className='App-header'>\n                <img src={logo} className='App-logo' alt='logo' />\n                <p>\n                  User Data for <code>{props.match.params.userId}</code>\n                </p>\n              </header>\n            )}\n          />\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(App)\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport configureStore from './configureStore'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './style.css'\n\nconst store = configureStore()\n\nReactDOM.render(<Provider store={store}><Router><App /></Router></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}