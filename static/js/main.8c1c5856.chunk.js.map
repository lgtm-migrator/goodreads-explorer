{"version":3,"sources":["assets/images/logo.svg","containers/App/reducer.js","reducers.js","containers/App/saga.js","utils/constants.js","sagas.js","configureStore.js","containers/App/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","isLoading","app","state","arguments","length","undefined","Object","objectSpread","HELLO_WORLD","rootReducer","combineReducers","helloWorld","regenerator_default","a","wrap","_context","prev","next","put","type","message","stop","_marked","this","saga","takeEvery","rootSaga","all","toConsumableArray","appSaga","sagas_marked","sagaMiddleware","createSagaMiddleware","App","react_default","createElement","className","src","logo","alt","href","target","rel","Component","Boolean","window","location","hostname","match","store","middlewares","enhancers","applyMiddleware","apply","composeEnhancers","compose","createStore","runSaga","run","injectedReducers","injectedSagas","configureStore","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2NCElCC,EAAe,CACnBC,UAAW,GAqBEC,EAlBH,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBJ,EAAyBI,UAAAC,OAAA,GAAAD,UAAA,GAGxC,OAAOG,OAAAC,EAAA,EAAAD,CAAA,GACFJ,EADL,CAEEM,aAAa,KCNNC,EAFKC,YAAgB,CAAET,mDCA3BU,GAAX,SAAWA,IAAX,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACE,OADFF,EAAAE,KAAA,EACQC,YAAI,CAAEC,KAAM,UAAWC,QAAS,gBADxC,wBAAAL,EAAAM,SAAAC,EAAAC,MAIe,IAAAC,EAAA,CACbC,YCRyB,cDQUd,eEL1Be,GAAX,SAAWA,IAAX,OAAAd,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACE,OADFF,EAAAE,KAAA,EACQU,YAAIrB,OAAAsB,EAAA,EAAAtB,CACLuB,IAFP,wBAAAd,EAAAM,SAAAS,EAAAP,MAMeG,QCJTK,EAAiBC,2EC4BRC,uOArBX,OACEC,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,OACbF,EAAArB,EAAAsB,cAAA,UAAQC,UAAU,cAChBF,EAAArB,EAAAsB,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCL,EAAArB,EAAAsB,cAAA,iBACOD,EAAArB,EAAAsB,cAAA,qCADP,wBAGAD,EAAArB,EAAAsB,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,wBAZQC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qECRAC,EHHS,WAA4C,IAAnBlD,EAAmBI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAC/C+C,EAAc,CAACnB,GAEfoB,EAAY,CAChBC,IAAeC,WAAf,EAAmBH,IAKfI,EAKFC,IAGEN,EAAQO,YACZ/C,EAEAV,EACAuD,EAAgBD,WAAhB,EAAoBF,IAgBtB,OAZAF,EAAMQ,QAAU1B,EAAe2B,IAAIhC,GACnCuB,EAAMU,iBAAmB,GACzBV,EAAMW,cAAgB,GAUfX,EGlCKY,GAEdC,IAASC,OAAO7B,EAAArB,EAAAsB,cAAC6B,EAAA,EAAD,CAAUf,MAAOA,GAAOf,EAAArB,EAAAsB,cAAC8B,EAAD,OAAoBC,SAASC,eAAe,SDqH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8c1c5856.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as ActionTypes from '../../utils/constants'\n\nconst initialState = {\n  isLoading: 0\n}\n\nconst app = (state = initialState, action) => {\n  switch (ActionTypes.HELLO_WORLD) {\n    case ActionTypes.HELLO_WORLD:\n      return {\n        ...state,\n        HELLO_WORLD: true\n      }\n    case ActionTypes.FETCH_START: {\n      return { ...state, isLoading: state.isLoading + 1 }\n    }\n    case ActionTypes.FETCH_END: {\n      return { ...state, isLoading: state.isLoading - 1 }\n    }\n    default:\n      return state\n  }\n}\n\nexport default app\n","import { combineReducers } from 'redux'\nimport app from './containers/App/reducer'\n\nconst rootReducer = combineReducers({ app })\n\nexport default rootReducer\n","import { takeEvery, put } from 'redux-saga/effects'\nimport * as ActionTypes from '../../utils/constants'\n\nfunction * helloWorld () {\n  yield put({ type: 'SUCCESS', message: 'Hello World' })\n}\n\nexport default [\n  takeEvery(ActionTypes.HELLO_WORLD, helloWorld)\n]\n","export const HELLO_WORLD = 'HELLO_WORLD'\nexport const FETCH_START = 'FETCH_START'\nexport const ERROR_OCCURED = 'ERROR_OCCURED'\nexport const NETWORK_ERROR_OCCURED = 'NETWORK_ERROR_OCCURED'\nexport const FETCH_END = 'FETCH_END'\n","import { all } from 'redux-saga/effects'\nimport appSaga from './containers/App/saga'\n\nfunction * rootSaga () {\n  yield all([\n    ...appSaga\n  ])\n}\n\nexport default rootSaga\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from './reducers'\nimport rootSaga from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport default function configureStore (initialState = {}) {\n  const middlewares = [sagaMiddleware]\n\n  const enhancers = [\n    applyMiddleware(...middlewares)\n  ]\n\n  // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  /* eslint-disable no-underscore-dangle */\n  const composeEnhancers =\n  process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    : compose\n  /* eslint-enable */\n\n  const store = createStore(\n    rootReducer,\n    // fromJS(initialState),\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run(rootSaga)\n  store.injectedReducers = {} // Reducer registry\n  store.injectedSagas = {} // Saga registry\n\n  // if(module.hot) {\n  //   // Enable Webpack hot module replacement for reducers\n  //   module.hot.accept('../reducers', () => {\n  //     const nextReducer = require('../reducers').default\n  //     store.replaceReducer(nextReducer)\n  //   })\n  // }\n\n  return store\n}\n","import React, { Component } from 'react'\n\nimport { helloWorld } from './action'\n\nimport logo from '../../assets/images/logo.svg'\nimport './style.css'\n\nclass App extends Component {\n  componentDidMount () {\n    helloWorld()\n  }\n  render () {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <img src={logo} className='App-logo' alt='logo' />\n          <p>\n            Edit <code>src/containers/App.js</code> and save to reload.\n          </p>\n          <a\n            className='App-link'\n            href='https://reactjs.org'\n            target='_blank'\n            rel='noopener noreferrer'\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport configureStore from './configureStore'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './style.css'\n\nconst store = configureStore()\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}