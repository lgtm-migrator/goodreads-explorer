{"version":3,"sources":["containers/Dashboard/action.js","containers/App/reducer.js","containers/Dashboard/reducer.js","reducers.js","containers/App/saga.js","utils/urls.js","utils/apiHelper.js","utils/goodreads.js","containers/Dashboard/saga.js","sagas.js","configureStore.js","containers/App/index.jsx","serviceWorker.js","index.js","components/Fallback/index.jsx","utils/constants.js"],"names":["errorOccured","err","type","ERROR_OCCURED","getUserInfo","userId","FETCH_USER_INFO","getUserInfoSuccess","userInfo","FETCH_USER_INFO_SUCCESS","getUserData","FETCH_USER_DATA","getUserDataSuccess","userData","FETCH_USER_DATA_SUCCESS","userAccountIsPrivate","PRIVATE_ACCOUNT_ERROR","networkErrorOccured","NETWORK_ERROR_OCCURED","initialState","isLoading","error","app","state","action","ActionTypes","title","name","message","dashboard","user","rootReducer","combineReducers","helloWorld","put","takeEvery","grApiRoot","wrapByLoader","handleResponse","response","status","code","statusText","Promise","reject","json","then","fetchApi","url","params","fetch","catch","fn","getBooksOnShelf","shelf","a","fetchLoop","resolve","page","lastpage","books","total","book","res","currentpage","numpages","parseInt","concat","constructor","Array","takeLatest","call","Goodreads","Actions","cachedData","JSON","parse","window","localStorage","getItem","Date","now","timestamp","data","user_shelves","shelves","user_shelf","map","all","bookOnShelves","idx","setItem","stringify","console","log","rootSaga","appSaga","dashboardSaga","sagaMiddleware","createSagaMiddleware","Dashboard","lazy","Home","ErrorBoundary","ErrorHandler","App","props","searchHandler","bind","ReactGA","initialize","testMode","pageview","location","pathname","search","this","history","push","fallback","Fallback","className","spinning","delay","Switch","Route","exact","path","render","Redirect","to","Component","defaultProps","withRouter","connect","Boolean","hostname","match","store","middlewares","enhancers","applyMiddleware","composeEnhancers","compose","createStore","runSaga","run","injectedReducers","injectedSagas","configureStore","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FallBack","HELLO_WORLD","FETCH_START","FETCH_END"],"mappings":"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","file":"static/js/main.70ca34eb.chunk.js","sourcesContent":["import {\n  FETCH_USER_INFO,\n  FETCH_USER_INFO_SUCCESS,\n  FETCH_USER_DATA,\n  FETCH_USER_DATA_SUCCESS,\n  ERROR_OCCURED,\n  PRIVATE_ACCOUNT_ERROR,\n  NETWORK_ERROR_OCCURED\n} from '../../utils/constants'\n\nexport const errorOccured = err => ({\n  type: ERROR_OCCURED,\n  err\n})\n\nexport const getUserInfo = userId => ({\n  type: FETCH_USER_INFO,\n  userId\n})\n\nexport const getUserInfoSuccess = userInfo => ({\n  type: FETCH_USER_INFO_SUCCESS,\n  userInfo\n})\n\nexport const getUserData = userId => ({\n  type: FETCH_USER_DATA,\n  userId\n})\n\nexport const getUserDataSuccess = userData => ({\n  type: FETCH_USER_DATA_SUCCESS,\n  userData\n})\n\nexport const userAccountIsPrivate = err => ({\n  type: PRIVATE_ACCOUNT_ERROR,\n  err\n})\n\nexport const networkErrorOccured = err => ({\n  type: NETWORK_ERROR_OCCURED,\n  err\n})\n","import * as ActionTypes from '../../utils/constants'\n\nconst initialState = {\n  isLoading: 0,\n  error: null\n}\n\nconst app = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_START: {\n      return { ...state, isLoading: state.isLoading + 1 }\n    }\n    case ActionTypes.FETCH_END: {\n      return { ...state, isLoading: state.isLoading - 1 }\n    }\n    case ActionTypes.ERROR_OCCURED: {\n      const { err } = action\n      return {\n        ...state,\n        error: {\n          title: err.name,\n          message: err.message\n        }\n      }\n    }\n    case ActionTypes.NETWORK_ERROR_OCCURED: {\n      const { err } = action\n      return { ...state, error: err }\n    }\n    case ActionTypes.PRIVATE_ACCOUNT_ERROR: {\n      const { err } = action\n      return { ...state, error: err }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\nexport default app\n","import * as ActionTypes from '../../utils/constants'\n\nconst initialState = {\n  userId: null,\n  userInfo: null,\n  userData: null\n}\n\nconst dashboard = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_USER_INFO: {\n      const { userId } = action\n      return { ...state, userId }\n    }\n    case ActionTypes.FETCH_USER_INFO_SUCCESS: {\n      const { userInfo } = action\n      return { ...state, userInfo: userInfo.user }\n    }\n    case ActionTypes.FETCH_USER_DATA: {\n      const { userId } = action\n      return { ...state, userId }\n    }\n    case ActionTypes.FETCH_USER_DATA_SUCCESS: {\n      const { userData } = action\n      return { ...state, userData: userData.user }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\nexport default dashboard\n","import { combineReducers } from 'redux'\nimport app from './containers/App/reducer'\nimport dashboard from './containers/Dashboard/reducer'\n\nconst rootReducer = combineReducers({ app, dashboard })\n\nexport default rootReducer\n","import { takeEvery, put } from 'redux-saga/effects'\nimport * as ActionTypes from '../../utils/constants'\n\nfunction * helloWorld () {\n  yield put({ type: 'SUCCESS', message: 'Hello World' })\n}\n\nexport default [\n  takeEvery(ActionTypes.HELLO_WORLD, helloWorld)\n]\n","export const grApiRoot = 'https://uqh87q11i5.execute-api.us-east-1.amazonaws.com/prod'\n","/* global fetch */\nimport { put } from 'redux-saga/effects'\nimport * as ActionTypes from './constants'\n\nexport const getGetParams = () => ({\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\nexport const handleResponse = (response) => {\n  if (response.status !== 200) {\n    const error = {\n      error: {\n        code: response.status,\n        message: 'Fetch error'\n      },\n      status: response.status,\n      statusText: response.statusText\n    }\n    return Promise.reject(error)\n  }\n  return response.json().then(json => json)\n}\n\nexport const fetchApi = (url, params) =>\n  fetch(url)\n    .then(handleResponse)\n    .catch(err => err)\n\nexport function * wrapByLoader (fn) {\n  yield put({ type: ActionTypes.FETCH_START })\n  yield fn()\n  yield put({ type: ActionTypes.FETCH_END })\n}\n","import { grApiRoot } from './urls'\nimport { getGetParams, fetchApi } from './apiHelper'\n\nexport function getUserInfo (userId) {\n  const url = `${grApiRoot}/user/show?id=${userId}`\n  return fetchApi(url, getGetParams())\n}\n\nexport async function getBooksOnShelf (userId, shelf) {\n  const fetchLoop = new Promise(async (resolve, reject) => {\n    let page = 1\n    let lastpage = false\n    let response = {\n      books: {\n        total: 0,\n        book: []\n      }\n    }\n    do {\n      const url = `${grApiRoot}/review/list?id=${userId}&shelf=${shelf}&per_page=200&page=${page}`\n      const res = await fetchApi(url, getGetParams())\n      const { currentpage, numpages, book, total } = res.books\n\n      response.books.total = parseInt(total)\n      if (book) {\n        response.books.book = response.books.book.concat(book.constructor === Array ? book : [ book ])\n      }\n\n      page += 1\n      if (currentpage === numpages) {\n        lastpage = true\n        resolve(response)\n      }\n    } while (lastpage === false)\n  })\n\n  const response = await fetchLoop\n\n  return response\n}\n","import { takeLatest, put, call, all } from 'redux-saga/effects'\nimport * as ActionTypes from '../../utils/constants'\nimport * as Actions from './action'\nimport * as Goodreads from '../../utils/goodreads'\nimport { wrapByLoader } from '../../utils/apiHelper'\n\nconst getUserInfo = action =>\n  wrapByLoader(function * () {\n    try {\n      const response = yield call(Goodreads.getUserInfo, action.userId)\n      if (!response.error) {\n        const userInfo = response\n        yield put(Actions.getUserInfoSuccess(userInfo))\n      } else {\n        yield put(Actions.errorOccured(response))\n      }\n    } catch (err) {\n      yield put(Actions.errorOccured(err))\n    }\n  })\n\nconst getUserData = action =>\n  wrapByLoader(function * () {\n    try {\n      const cachedData = JSON.parse(window.localStorage.getItem(action.userId))\n\n      if (cachedData && ((Date.now() - cachedData.timestamp) < 3600000)) {\n        yield put(Actions.getUserDataSuccess(cachedData.data))\n      } else {\n        const response = yield call(Goodreads.getUserInfo, action.userId)\n        if (response.user && !response.error) {\n          const userData = response\n          if (userData.user.user_shelves) {\n            const shelves = userData.user.user_shelves.user_shelf.map(shelf => shelf.name)\n            const bookOnShelves = yield all(\n              shelves.map(\n                shelf => call(Goodreads.getBooksOnShelf, action.userId, shelf)\n              )\n            )\n            userData.user.user_shelves = bookOnShelves.map((shelf, idx) => ({\n              name: shelves[idx],\n              books: shelf.books ? shelf.books : { book: [] }\n            }))\n            try {\n              window.localStorage.setItem(\n                action.userId,\n                JSON.stringify({\n                  data: userData,\n                  timestamp: Date.now()\n                })\n              )\n            } catch (err) {\n              console.log(err)\n            }\n            yield put(Actions.getUserDataSuccess(userData))\n          } else {\n            yield put(Actions.userAccountIsPrivate({\n              title: 'Private Account',\n              message: `Sorry ${userData.user.name}, your account is private. Can't fetch your data.`\n            }))\n            yield put(Actions.getUserDataSuccess({\n              user: {\n                ...userData.user,\n                user_shelves: []\n              }\n            }))\n          }\n        } else {\n          yield put(Actions.networkErrorOccured({\n            title: 'Network Error',\n            message: response.message\n          }))\n        }\n      }\n    } catch (err) {\n      yield put(Actions.errorOccured(err))\n    }\n  })\n\nexport default [\n  takeLatest(ActionTypes.FETCH_USER_INFO, getUserInfo),\n  takeLatest(ActionTypes.FETCH_USER_DATA, getUserData)\n]\n","import { all } from 'redux-saga/effects'\nimport appSaga from './containers/App/saga'\nimport dashboardSaga from './containers/Dashboard/saga'\n\nfunction * rootSaga () {\n  yield all([\n    ...appSaga,\n    ...dashboardSaga\n  ])\n}\n\nexport default rootSaga\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from './reducers'\nimport rootSaga from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport default function configureStore (initialState = {}) {\n  const middlewares = [sagaMiddleware]\n\n  const enhancers = [\n    applyMiddleware(...middlewares)\n  ]\n\n  // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  /* eslint-disable no-underscore-dangle */\n  const composeEnhancers =\n  process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    : compose\n  /* eslint-enable */\n\n  const store = createStore(\n    rootReducer,\n    // fromJS(initialState),\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run(rootSaga)\n  store.injectedReducers = {} // Reducer registry\n  store.injectedSagas = {} // Saga registry\n\n  // if(module.hot) {\n  //   // Enable Webpack hot module replacement for reducers\n  //   module.hot.accept('../reducers', () => {\n  //     const nextReducer = require('../reducers').default\n  //     store.replaceReducer(nextReducer)\n  //   })\n  // }\n\n  return store\n}\n","import React, { Component, Suspense, lazy } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  withRouter,\n  Route,\n  Switch,\n  Redirect\n} from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport ReactGA from 'react-ga'\nimport Fallback from '../../components/Fallback'\n\n// antd components\nimport { Spin } from 'antd'\n\nimport 'antd/dist/antd.css'\nimport './style.css'\n\n// containers\nconst Dashboard = lazy(() => import('../Dashboard'))\nconst Home = lazy(() => import('../Home'))\nconst ErrorBoundary = lazy(() => import('../../components/ErrorBoundary'))\nconst ErrorHandler = lazy(() => import('../../components/ErrorHandler'))\n\nconst mapStateToProps = state => ({\n  isLoading: state.app.isLoading,\n  error: state.app.error\n})\n\nconst mapDispatchToProps = {\n\n}\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n\n    this.searchHandler = this.searchHandler.bind(this)\n\n    // Google analytics\n    ReactGA.initialize('UA-132487735-1', { testMode: this.props.testMode })\n    ReactGA.pageview(window.location.pathname + window.location.search)\n  }\n\n  searchHandler (userId) {\n    this.props.history.push(`/user/${userId}/viz/stats`)\n  }\n\n  componentDidMount () {\n    // Maybe get top books from goodreads?\n  }\n\n  render () {\n    return (\n      <Suspense fallback={<Fallback />} >\n        <ErrorBoundary>\n          <Spin\n            className='App'\n            spinning={this.props.isLoading > 0}\n            delay={500}\n          >\n            <Switch>\n              <Route\n                exact\n                path='/'\n                render={props => (\n                  <Suspense fallback={<Fallback />} >\n                    <Home\n                      searchHandler={this.searchHandler}\n                    />\n                  </Suspense>\n                )}\n              />\n              <Route\n                path='/user/:userId'\n                render={props => (\n                  <Suspense fallback={<Fallback />} >\n                    <Dashboard {...props} />\n                  </Suspense>\n                )}\n              />\n              <Redirect to='/' />\n            </Switch>\n            {\n              this.props.error && (\n                <ErrorHandler error={this.props.error} />\n              )\n            }\n          </Spin>\n        </ErrorBoundary>\n      </Suspense>\n    )\n  }\n}\n\nApp.defaultProps = {\n  testMode: false\n}\n\nApp.propTypes = {\n  testMode: PropTypes.bool\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(App)\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport configureStore from './configureStore'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './style.css'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router\n      basename={process.env.PUBLIC_URL + '/'}\n    >\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\n// import { Spin } from 'antd'\n\nimport './style.css'\n\n// const FallBack = () => (\n//   <Spin\n//     className='App'\n//     spinning\n//     delay={1}\n//     size='large'\n//   />\n// )\n\nconst FallBack = () => <div className='suspenseFallback'>Loading...</div>\n\nexport default FallBack\n","export const HELLO_WORLD = 'HELLO_WORLD'\nexport const FETCH_START = 'FETCH_START'\nexport const ERROR_OCCURED = 'ERROR_OCCURED'\nexport const NETWORK_ERROR_OCCURED = 'NETWORK_ERROR_OCCURED'\nexport const PRIVATE_ACCOUNT_ERROR = 'PRIVATE_ACCOUNT_ERROR'\nexport const FETCH_END = 'FETCH_END'\n\nexport const FETCH_USER_INFO = 'FETCH_USER_INFO'\nexport const FETCH_USER_INFO_SUCCESS = 'FETCH_USER_INFO_SUCCESS'\nexport const FETCH_USER_DATA = 'FETCH_USER_DATA'\nexport const FETCH_USER_DATA_SUCCESS = 'FETCH_USER_DATA_SUCCESS'\n"],"sourceRoot":""}